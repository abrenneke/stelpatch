
types = {
	type[zones] = {
		path = "game/common/zones"
	}
	type[zone_slots] = {
		path = "game/common/zone_slots"
	}	
}

zones = {
	## cardinality = 0..1
	icon = <sprite>
	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..1
	max_buildings_planet_class = bool
	
	## cardinality = 0..1
	swap_type = <district>
	## cardinality = 0..1
	swap_type_weight = int
	
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	potential = { 
		## cardinality = 0..inf
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	unlock = { 
		## cardinality = 0..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	resources = {
		category = planet_zones
		cost = {
			<resource> = int
		}
	}
	## cardinality = 0..1
	ai_resource_production = {
		## cardinality = 0..inf
   		<resource> = int
		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
		
	## cardinality = 0..inf
	## replace_scope = { root = planet this = planet }
	triggered_district_planet_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	planet_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..inf
	triggered_desc = {
		## cardinality = 0..1
		trigger = {
			## cardinality = 0..inf
			alias_name[trigger] = alias_match_left[trigger]
		}
		text = localisation
	}

	## cardinality = 0..1
	max_buildings = int
	
	## cardinality = 0..1
	zone_sets = {
		## cardinality = 0..inf
		enum[zone_set]
	}
	
	## cardinality = 0..1
	include = {
		## cardinality = 0..1
		all
		## cardinality = 0..inf
		<building>
	}
	
	## cardinality = 0..1
	included_building_sets = {
		## cardinality = 0..inf
		enum[building_sets]
	}
	
	## cardinality = 0..1
	excluded_building_sets = {
		## cardinality = 0..inf
		enum[building_sets]
	}
	
	## cardinality = 0..1
	convert_to = {
		## cardinality = 0..inf
		enum[zone_type]
	}
	
	## cardinality = 0..1
	show_in_tech = <technology>
	
	# for inline scripts to remove errors
	## cardinality = 0..inf
	alias_name[triggered_district_modifier_planet] = alias_match_left[triggered_district_planet_modifier]
	
	# for inline scripts to remove errors
	## cardinality = 0..inf
	alias_name[triggered_planet_modifier_planet] = alias_match_left[triggered_planet_modifier_planet]	
	## cardinality = 0..1
	ai_priority = int
	## cardinality = 0..1
	ai_weight_coefficient = float
}

zone_slots = {

	## cardinality = 0..1
	start = enum[zone_type]
	
	## cardinality = 0..1
	included_zone_sets = {
		## cardinality = 0..inf
		enum[zone_set]
	}

	## cardinality = 0..1
	include = {
		## cardinality = 0..inf
		enum[zone_type]
	}

	## cardinality = 0..1
	exclude = {
		## cardinality = 0..inf
		enum[zone_type]
	}

	## cardinality = 0..1
	## replace_scope = { root = planet this = planet from = planet }
    potential = { 
        alias_name[trigger] = alias_match_left[trigger]
    }

	## cardinality = 0..1
	## replace_scope = { root = planet this = planet from = planet }
	unlock = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
}

enums = {
	enum[zone_type] = {
		all
		zone_agrarian_urban
		zone_anglers
		zone_betharian
		zone_broken_shackles_memorial
		zone_cosmogenesis_default
		zone_default
		zone_energy
		zone_energy_hive
		zone_energy_nexus
		zone_energy_physics
		zone_energy_ring_world
		zone_energy_wilderness
		zone_factory
		zone_food
		zone_food_biology
		zone_food_hive
		zone_food_ring_world
		zone_food_wilderness
		zone_fortress
		zone_fortress_hive
		zone_fortress_wilderness
		zone_foundry
		zone_foundry_hive
		zone_foundry_wilderness
		zone_habitat_hydroponics
		zone_habitat_knights
		zone_habitat_research
		zone_habitat_research_unity
		zone_hive_spawning
		zone_industrial
		zone_machine_replication
		zone_minerals
		zone_minerals_engineering
		zone_minerals_hive
		zone_minerals_nexus
		zone_minerals_wilderness
		zone_payback_enlightenment
		zone_research
		zone_research_engineering
		zone_research_engineering_arcology
		zone_research_engineering_hive
		zone_research_engineering_nexus
		zone_research_engineering_ring_world
		zone_research_physics
		zone_research_physics_arcology
		zone_research_physics_hive
		zone_research_physics_nexus
		zone_research_physics_ring_world
		zone_research_society
		zone_research_society_arcology
		zone_research_society_hive
		zone_research_society_nexus
		zone_research_society_ring_world
		zone_research_unity
		zone_research_unity_wilderness
		zone_research_wilderness
		zone_resort
		zone_resort_entertainment
		zone_resort_grand_museum
		zone_resort_hunting_ground
		zone_resort_spiritual_retreat
		zone_resort_zoo 
		zone_rw_energy
		zone_rw_food
		zone_spawning
		zone_spawning_hive
		zone_subterranean_urban
		zone_trade
		zone_trade_wilderness
		zone_unity
		zone_unity_arcology
		zone_unity_bio_trophy
		zone_unity_bio_trophy_arcology
		zone_unity_bio_trophy_nexus
		zone_unity_bio_trophy_ring_world
		zone_unity_nexus
		zone_unity_ring_world
		zone_unity_spiritualist
		zone_unity_spiritualist_arcology
		zone_unity_spiritualist_nexus
		zone_unity_spiritualist_ring_world
		zone_unity_wilderness
		zone_urban
		zone_urban_energy
		zone_urban_food
		zone_urban_minerals
		zone_urban_wilderness
	}
	enum[zone_set] = {
		arcology
		cosmogenesis_default
		default
		energy
		food
		habitat_energy
		habitat_minerals
		habitat_research
		habitat_urban
		hive
		minerals
		nexus
		resort
		resort_attraction
		ring_world
		special
		urban
		zone_default
	}
}
